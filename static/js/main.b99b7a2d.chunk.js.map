{"version":3,"sources":["components/LearningOptions/LearningOptions.jsx","components/LinkList/LinkList.jsx","chatbot/config.js","chatbot/ActionProvider.js","chatbot/MessageParser.js","App.js","reportWebVitals.js","index.js"],"names":["LearningOptions","props","optionsMarkup","text","handler","actionProvider","handleJavascriptList","id","handlePythonList","handleReactList","map","option","react_default","a","createElement","className","key","onClick","LinkList","linkMarkup","options","link","href","url","target","rel","config","botName","initialMessages","createChatBotMessage","concat","widget","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","components_LearningOptions_LearningOptions","components_LinkList_LinkList","ActionProvider","setStateFunc","_this","this","Object","classCallCheck","message","updateChatbotState","setState","greetingMessage","prevState","objectSpread","messages","toConsumableArray","MessageParser","lowerCaseMessage","toLowerCase","includes","greet","App","_useState","useState","_useState2","slicedToArray","showBot","toggleBot","style","maxWidth","build_default","messageHistory","JSON","parse","localStorage","getItem","messageParser","saveMessages","HTMLString","console","log","setItem","stringify","prev","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b99b7a2d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./LearningOptions.css\";\r\n\r\nconst LearningOptions = (props) => {\r\n  const options = [\r\n    { text: \"Javascript\",\r\n      handler: props.actionProvider.handleJavascriptList,\r\n      id: 1 },\r\n    { text: \"Python\", handler: props.actionProvider.handlePythonList,\r\n     id: 2 },\r\n    { text: \"React\", handler: props.actionProvider.handleReactList,\r\n     id: 3 },\r\n    \r\n  ];\r\n\r\n  const optionsMarkup = options.map((option) => (\r\n    <button\r\n      className=\"learning-option-button\"\r\n      key={option.id}\r\n      onClick={option.handler}\r\n    >\r\n      {option.text}\r\n    </button>\r\n  ));\r\n\r\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\r\n};\r\n\r\nexport default LearningOptions;\r\n\r\n","\r\nimport React from \"react\";\r\n\r\nimport \"./LinkList.css\";\r\n\r\nconst LinkList = (props) => {\r\n  const linkMarkup = props.options.map((link) => (\r\n    <li key={link.id} className=\"link-list-item\">\r\n      <a\r\n        href={link.url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"link-list-item-url\"\r\n      >\r\n        {link.text}\r\n      </a>\r\n    </li>\r\n  ));\r\n\r\n  return <ul className=\"link-list\">{linkMarkup}</ul>;\r\n};\r\n\r\nexport default LinkList;","import { createChatBotMessage } from 'react-chatbot-kit';\r\nimport React from \"react\";\r\nimport LearningOptions from '../components/LearningOptions/LearningOptions';\r\nimport LinkList from '../components/LinkList/LinkList';\r\nconst botName = \"Testbot\";\r\n\r\nconst config = { \r\n\r\n  botName: \"LearningBot\",\r\n\r\n  initialMessages: [createChatBotMessage(`Hi! I'm ${botName}. I'm here to help. What do you want to learn?`, {\r\n    widget: \"learningOptions\",\r\n  }),\r\n// ],\r\n\r\n\r\n  // botName: botName,\r\n  // initialMessages: [createChatBotMessage(\"Hi, I'm here to help. What do you want to learn?\",{\r\n  //   widget: \"learningOptions\",\r\n  // }),\r\n  // console.log(\"learning bot\",botName)\r\n\r\n],\r\n  customStyles: {\r\n    botMessageBox: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n  },\r\n  widgets: [\r\n    {\r\n      widgetName: \"learningOptions\",\r\n      widgetFunc: (props) => <LearningOptions {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"javascriptLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"javascriptLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n      props: {\r\n        options: [\r\n          {\r\n            text: \"Introduction to JS\",\r\n            url:\r\n              \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\r\n            id: 1,\r\n          },\r\n          {\r\n            text: \"Mozilla JS Guide\",\r\n            url:\r\n              \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\r\n            id: 2,\r\n          },\r\n          {\r\n            text: \"Frontend Masters\",\r\n            url: \"https://frontendmasters.com\",\r\n            id: 3,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n\r\n    {\r\n      widgetName: \"pythonLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"pythonLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n      props: {\r\n        options: [\r\n          {\r\n            text: \"Introduction to Python (W3Schools)\",\r\n            url:\r\n              \"https://www.w3schools.com/python/\",\r\n            id: 1,\r\n          },\r\n          {\r\n            text: \"Download link for Python\",\r\n            url:\r\n              \"https://www.python.org/downloads/\",\r\n            id: 2,\r\n          },\r\n          {\r\n            text: \"Python Tutorial (GFG)\",\r\n            url: \"https://www.geeksforgeeks.org/python-programming-language/\",\r\n            id: 3,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n\r\n\r\n\r\n    {\r\n      widgetName: \"reactLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n    },\r\n    {\r\n      widgetName: \"reactLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n      props: {\r\n        options: [\r\n          {\r\n            text: \"React Documentation \",\r\n            url:\r\n              \"https://reactjs.org/tutorial/tutorial.html\",\r\n            id: 1,\r\n          },\r\n          {\r\n            text: \"React Tutorial (W3Schools)\",\r\n            url:\r\n              \"https://www.w3schools.com/REACT/DEFAULT.ASP\",\r\n            id: 2,\r\n          }\r\n          \r\n        ],\r\n      },\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n  ],\r\n}\r\n\r\nexport default config","class ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  handleJavascriptList = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Fantastic, I've got the following resources for you on Javascript:\",\r\n      {\r\n        widget: \"javascriptLinks\",\r\n      }\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n\r\n  handlePythonList =() =>{\r\n    const message = this.createChatBotMessage(\r\n      \"Fantastic, I've got the following resources for you on Python:\",\r\n      {\r\n        widget: \"pythonLinks\",\r\n      }\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n\r\n  }\r\n\r\n  handleReactList =() =>{\r\n    const message = this.createChatBotMessage(\r\n      \"Fantastic, I've got the following resources for you on React:\",\r\n      {\r\n        widget: \"reactLinks\",\r\n      }\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n\r\n  }\r\n  \r\n  greet() {\r\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n  \r\n  updateChatbotState(message) {    \r\n   this.setState(prevState => ({\r\n    \t...prevState, messages: [...prevState.messages, message]\r\n    }))\r\n  }\r\n}\r\n\r\nexport default ActionProvider","class MessageParser {\r\n  constructor(actionProvider) {\r\n    this.actionProvider = actionProvider;\r\n  }\r\n\r\n  parse(message) {\r\n    const lowerCaseMessage = message.toLowerCase()\r\n    \r\n    if (lowerCaseMessage.includes(\"hello\")) {\r\n      this.actionProvider.greet()\r\n    }\r\n    if (lowerCaseMessage.includes(\"javascript\")) {\r\n      this.actionProvider.handleJavascriptList();\r\n    }\r\n    if (lowerCaseMessage.includes(\"python\")) {\r\n      this.actionProvider.handlePythonList();\r\n    }\r\n    if (lowerCaseMessage.includes(\"react\")) {\r\n      this.actionProvider.handleReactList();\r\n    }\r\n  }\r\n}\r\n\r\nexport default MessageParser","import React, {useState} from \"react\";\r\nimport Chatbot from \"react-chatbot-kit\";\r\nimport 'react-chatbot-kit/build/main.css'\r\nimport config from \"./chatbot/config\";\r\nimport ActionProvider from \"./chatbot/ActionProvider\";\r\nimport MessageParser from \"./chatbot/MessageParser\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [showBot, toggleBot]= useState(false);\r\n  const saveMessages = (messages, HTMLString) => {\r\n    console.log(\"messages\",messages)\r\n    localStorage.setItem('chat_messages',JSON.stringify(messages));\r\n  };\r\n  const loadMessages = () => {\r\n    const messages = JSON.parse(localStorage.getItem('chat_messages'));\r\n    return messages;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ maxWidth: \"300px\" }}>\r\n        {showBot && (\r\n        <Chatbot\r\n          config={config}\r\n          actionProvider={ActionProvider}\r\n          messageHistory={loadMessages()}\r\n\r\n          messageParser={MessageParser}\r\n          saveMessages={(messages,HTMLString)=>saveMessages(messages,HTMLString)}\r\n\r\n        />\r\n        )}\r\n              <button onClick={() => toggleBot((prev) => !prev)}>Bot</button>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}